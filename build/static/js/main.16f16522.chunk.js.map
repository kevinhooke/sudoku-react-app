{"version":3,"sources":["components/CellComponent.jsx","dispatcher/Dispatcher.js","stores/SudokuSolverStore.js","actions/SudokuSolverAction.js","containers/SudokuSolver.jsx","App.js","serviceWorker.js","index.js"],"names":["CellComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","event","onChange","react_default","a","createElement","className","type","value","Component","AppDispatcher","Dispatcher","EventEmitter","require","puzzleData","message","stores_SudokuSolverStore","SudokuSolverStore","payload","register","handleAction","callback","on","removeListener","newMessage","newData","action","actionName","setData","data","emit","console","log","JSON","stringify","row","setMessage","SudokuSolverAction","initSamplePuzzle","dispatch","clearData","updatePuzzleData","parseResponse","response","parsedData","temp","rows","split","buildRequest","requestData","currentData","getData","slice","currentRow","toConsumableArray","cell","join","callSolverLambda","requestPayload","request","post","send","set","timeout","deadline","end","err","res","body","errorMessage","SudokuSolver","state","grid","onError","colIndex","target","updatedGrid","preventDefault","addChangeListener","addErrorListener","setState","getMessage","_this2","id","onClick","handleSubmit","handleClear","handleRestSample","map","key","components_CellComponent","handleGridChange","App","containers_SudokuSolver","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16f16522.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CellComponent extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event){\n        this.props.onChange(event);\n    }\n\n    render() {\n        return (\n            <span className=\"label\">\n                <input className=\"cell\" type=\"text\" value={this.props.value} onChange={this.handleChange}/>\n            </span>\n        );\n    }\n\n}\nexport default CellComponent;","import {Dispatcher} from 'flux';\nvar AppDispatcher = new Dispatcher();\n\nexport default AppDispatcher;","import AppDispatcher from \"../dispatcher/Dispatcher\";\nvar EventEmitter = require('events').EventEmitter;\n\nvar puzzleData = {\n}\n\nvar message = {\n\n}\n\nclass SudokuSolverStore extends EventEmitter {\n\n    constructor() {\n        super();\n        this.payload = AppDispatcher.register(this.handleAction.bind(this));\n    }\n\n    addChangeListener(callback){\n        this.on('change', callback);\n    }\n\n    removeChangeListener(callback){\n        this.removeListener('change', callback);\n    }\n\n    addErrorListener(callback){\n        this.on('error', callback);\n    }\n\n    removeErrorListener(callback){\n        this.removeListener('error', callback);\n    }\n\n    getMessage(){\n        return message;\n    }\n\n    setMessage(newMessage){\n        message = newMessage;\n    }\n\n    setData(newData){\n        puzzleData = newData;\n    }\n\n    getData(){\n        return puzzleData;\n    }\n\n    handleAction(action) {\n\n        switch (action.actionName) {\n\n            case 'NEW_DATA' :\n                this.setData(action.data);\n                this.emit('change');\n                break;\n\n            case 'UPDATE':\n                console.log(\"SudokuSolverStore is handling UPDATE action!: \" + JSON.stringify(action.data));\n                var newData = [];\n\n                for(var row in action.data){\n                    console.log(\"row: \" + JSON.stringify(action.data[row]));\n                    newData[row] = action.data[row];\n                }\n                this.setData(newData);\n                this.emit('change');\n                break;\n\n            case 'ERROR' :\n                this.setMessage(action.message);\n                this.emit('error');\n                break;\n        }\n    }\n\n}\n\nexport default new SudokuSolverStore();","import request from 'superagent';\nimport AppDispatcher from \"../dispatcher/Dispatcher\";\nimport SudokuSolverStore from \"../stores/SudokuSolverStore\";\n\nconst SudokuSolverAction = {\n\n    initSamplePuzzle(){\n        console.log(\"SudokuSolverAction initSamplePuzzle()\");\n        var puzzle = {\n            rows:\n                [\n                    [\"\", \"\", \"\", \"8\", \"1\", \"\", \"6\", \"7\", \"\"],\n                    [\"\", \"\", \"7\", \"4\", \"9\", \"\", \"2\", \"\", \"8\"],\n                    [\"\", \"6\", \"\", \"\", \"5\", \"\", \"1\", \"\", \"4\"],\n                    [\"1\", \"\", \"\", \"\", \"\", \"3\", \"9\", \"\", \"\"],\n                    [\"4\", \"\", \"\", \"\", \"8\", \"\", \"\", \"\", \"7\"],\n                    [\"\", \"\", \"6\", \"9\", \"\", \"\", \"\", \"\", \"3\"],\n                    [\"9\", \"\", \"2\", \"\", \"3\", \"\", \"\", \"6\", \"\"],\n                    [\"6\", \"\", \"1\", \"\", \"7\", \"4\", \"3\", \"\", \"\"],\n                    [\"\", \"3\", \"4\", \"\", \"6\", \"9\", \"\", \"\", \"\"]\n                ]\n        }\n\n        AppDispatcher.dispatch({\n            actionName: 'NEW_DATA',\n            data: puzzle.rows\n        });\n    },\n\n    clearData(){\n        console.log(\"SudokuSolverAction initSamplePuzzle()\");\n        var puzzle = {\n            rows:\n                [\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n                    [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n                ]\n        }\n\n        AppDispatcher.dispatch({\n            actionName: 'NEW_DATA',\n            data: puzzle.rows\n        });\n    },\n\n    updatePuzzleData(newData){\n        AppDispatcher.dispatch({\n            actionName: 'NEW_DATA',\n            data: newData\n        });\n    },\n\n    parseResponse(response){\n        var parsedData = {};\n        var temp = response.rows;\n        for (var row=0;row<9;row++) {\n            parsedData[row] = [];\n            parsedData[row] = temp[row].split('');\n        }\n        return parsedData;\n    },\n\n    buildRequest(){\n        var requestData = [];\n        //console.log(\"check before , array in store: \" + JSON.stringify( SudokuSolverStore.getData()));\n        //use slice() to clone the original array, to not modify it directly\n        var currentData = SudokuSolverStore.getData().slice();\n        console.log(\"current data: \" + JSON.stringify(currentData));\n        for (var row=0;row<9;row++) {\n            //clone a copy of the current row array\n            var currentRow = [...currentData[row]];\n            for(var cell=0;cell<9;cell++){\n                if(currentRow[cell] === \"\"){\n                    currentRow[cell] = \".\";\n                }\n            }\n            //join array to a string\n            requestData[row] = currentRow.join(\"\");\n        }\n        //console.log(\"check, array in store: \" + JSON.stringify( SudokuSolverStore.getData()));\n        return requestData;\n    },\n\n    callSolverLambda() {\n        console.log(\"SudokuSolverAction callSolverLambda()\");\n\n        //TODO: convert state/store to this format\n\n        // var requestPayload = {\n        //     rows:\n        //         [\n        //             \"...81.67.\",\n        //             \"..749.2.8\",\n        //             \".6..5.1.4\",\n        //             \"1....39..\",\n        //             \"4...8...7\",\n        //             \"..69....3\",\n        //             \"9.2.3..6.\",\n        //             \"6.1.743..\",\n        //             \".34.69...\"\n        //         ]\n        // }\n\n        var requestPayload = {};\n        requestPayload.rows = this.buildRequest();\n\n        request.post('https://aqfhv970kg.execute-api.us-west-1.amazonaws.com/test/sudoku')\n            .send(requestPayload)\n            .set('Content-Type', 'application/json')\n            .timeout({\n                response: 5000,  // 3 secs before response\n                deadline: 10000, // 6 sec to complete\n            })\n            .end(function(err, res){\n                if (err) {\n                    console.log(\"request failed: \" + JSON.stringify(err));\n                } else {\n                    console.log(\"success: \");\n                    console.log(JSON.stringify(res));\n                    if (res.body.errorMessage) {\n                        //dispatch response\n                        AppDispatcher.dispatch({\n                            actionName: 'ERROR',\n                            message: \"Failed to solve puzzle, is it a valid puzzle with a single solution?\"\n                        });\n                    } else {\n                        //dispatch response\n                        var parsedData = SudokuSolverAction.parseResponse(res.body);\n                        AppDispatcher.dispatch({\n                            actionName: 'UPDATE',\n                            data: parsedData\n                        });\n                    }\n                }\n            });\n    }\n}\nexport default SudokuSolverAction;","import React, {Component} from 'react';\nimport CellComponent from \"../components/CellComponent\";\nimport SudokuSolverAction from \"../actions/SudokuSolverAction\";\nimport SudokuSolverStore from \"../stores/SudokuSolverStore\";\n\n//TODO validation on input fields\n\n//TODO clear error message on each action\n\n//TODO show solving progress/status while waiting for response\n\n//TODO spruce up error message box\n\nclass SudokuSolver extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state =\n            {\n                grid: [],\n                message: \"\"\n            };\n\n        for (var row = 0; row < 9; row++) {\n            this.state.grid[row] = [];\n        }\n\n        this.onChange = this.onChange.bind(this);\n        this.onError = this.onError.bind(this);\n    };\n\n    //handler approach 2:\n    handleGridChange(row, colIndex, event) {\n        console.log(\"row [\" + row + \"] col [\" + colIndex + \"] : \" + event.target.value);\n        var updatedGrid = [...this.state.grid];\n        updatedGrid[row][colIndex] = event.target.value;\n\n        //before adding Flux, to update state directly\n        //this.setState({grid: updatedGrid});\n\n        //with Flux, call Action to send updated data to Store\n        SudokuSolverAction.updatePuzzleData(updatedGrid);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(\"submit pressed\");\n        SudokuSolverAction.callSolverLambda();\n    }\n\n    handleClear(event) {\n        event.preventDefault();\n        console.log(\"clear pressed\");\n        SudokuSolverAction.clearData();\n    }\n\n    handleRestSample(event){\n        event.preventDefault();\n        SudokuSolverAction.initSamplePuzzle();\n    }\n\n    /**\n     * Load initial state with a sample.\n     */\n    componentWillMount() {\n        SudokuSolverStore.addChangeListener(this.onChange);\n        SudokuSolverStore.addErrorListener(this.onError);\n        SudokuSolverAction.initSamplePuzzle();\n    }\n\n    onError(){\n        console.log('SudokuSolver onError triggered');\n        this.setState({message: SudokuSolverStore.getMessage()});\n    }\n\n    /**\n     * Updates state when an event is triggered from the Store.\n     */\n    onChange() {\n        console.log('SudokuSolver onChange triggered');\n        this.setState({grid: SudokuSolverStore.getData()});\n    }\n\n    render() {\n        return (\n            <div className=\"sudoku-grid-container\">\n                <div id=\"messages\">{this.state.message}</div>\n                <div className=\"buttons\">\n                    <button className=\"buttons\" onClick={this.handleSubmit}>Solve Puzzle</button>\n                    <button className=\"buttons\" onClick={this.handleClear}>Clear grid</button>\n                    <button className=\"buttons\" onClick={this.handleRestSample}>Reload sample puzzle</button>\n                </div>\n\n                <table className=\"sudoku-grid\">\n                    <tbody>\n                    <tr>\n                        {\n                            this.state.grid[0].map((cell, colIndex) => (\n                                    <td key={\"row0\" + colIndex}>\n                                        <CellComponent value={this.state.grid[0][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 0, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    <tr>\n                        {\n\n                            this.state.grid[1].map((cell, colIndex) => (\n                                    <td key={\"row1\" + colIndex}>\n                                        <CellComponent value={this.state.grid[1][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 1, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    <tr>\n                        {\n                            this.state.grid[2].map((cell, colIndex) => (\n                                    <td key={\"row2\" + colIndex}>\n                                        <CellComponent value={this.state.grid[2][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 2, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    <tr>\n                        {\n                            this.state.grid[3].map((cell, colIndex) => (\n                                    <td key={\"row3\" + colIndex}>\n                                        <CellComponent value={this.state.grid[3][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 3, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    <tr>\n                        {\n                            this.state.grid[4].map((cell, colIndex) => (\n                                    <td key={\"row4\" + colIndex}>\n                                        <CellComponent value={this.state.grid[4][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 4, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    <tr>\n                        {\n                            this.state.grid[5].map((cell, colIndex) => (\n                                    <td key={\"row5\" + colIndex}>\n                                        <CellComponent value={this.state.grid[5][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 5, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    <tr>\n                        {\n                            this.state.grid[6].map((cell, colIndex) => (\n                                    <td key={\"row6\" + colIndex}>\n                                        <CellComponent value={this.state.grid[6][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 6, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    <tr>\n                        {\n                            this.state.grid[7].map((cell, colIndex) => (\n                                    <td key={\"row7\" + colIndex}>\n                                        <CellComponent value={this.state.grid[7][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 7, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    <tr>\n                        {\n                            this.state.grid[8].map((cell, colIndex) => (\n                                    <td key={\"row8\" + colIndex}>\n                                        <CellComponent value={this.state.grid[8][colIndex]}\n                                                       onChange={this.handleGridChange.bind(this, 8, colIndex)}/>\n                                    </td>\n                                )\n                            )}\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n}\n\nexport default SudokuSolver;","import React, { Component } from 'react';\nimport './App.css';\nimport SudokuSolver from \"./containers/SudokuSolver\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <h3>Sudoku Solver</h3>\n        <SudokuSolver/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}